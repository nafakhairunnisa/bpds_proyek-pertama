# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOQqb_flSPwJC2UzzRLL3Q7-yAtOSdJs

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Nafa Khairunnisa
- Email: nkhairunn2412@gmail.com
- Id Dicoding: nafa-khairunnisa

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

# Libraries yang umum digunakan
import pandas as pd
import seaborn as sns
import math
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency, ttest_ind

# Libraries untuk data preparation
from scipy.stats.mstats import winsorize
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Libraries untuk modeling
import pickle
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

"""### Menyiapkan data yang akan digunakan"""

# Data Loading
url = "https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/refs/heads/main/employee/employee_data.csv"
df = pd.read_csv(url)

df.head()

"""## Data Understanding

Data understanding dilakukan untuk memahami da eksplorasi data untuk mendapatkan informasi yang berguna dari dataset.
"""

# Deskripsi variabel
df.describe()

# Info dataset
df.info()

"""**Insight**:

- Dataset memiliki 1470 sampel.
- Terdiri dari 35 fitur (1 float, 26 int, dan 8 object)
- Fitur attrition adalah label target.
"""

# Cek data duplikat
df_duplicated = df.duplicated().sum()
print("Jumlah data duplikat = ", df_duplicated)

# Cek missing value
df.isna().sum()

"""Insights:

- Dataset tidak memiliki sampel duplikat.
- Missing value ada pada kolom attrition (karyawan resign atau tidak) sebanyak 412.
"""

# Cek nilai unique
df.nunique()

# Cek nilai unique

# Attrition
print("Attrition :", df['Attrition'].unique())

# BusinessTravel
print("BusinessTravel :", df['BusinessTravel'].unique())

# Department
print("Department :", df['Department'].unique())

# EducationField
print("EducationField :", df['EducationField'].unique())

# Gender
print("Gender :", df['Gender'].unique())

# JobRole
print("JobRole :", df['JobRole'].unique())

# MaritalStatus
print("MaritalStatus :", df['MaritalStatus'].unique())

# OverTime
print("OverTime :", df['OverTime'].unique())

# PerformanceRating
print("PerformanceRating :", df['PerformanceRating'].unique())

"""### EDA

Exploratory Data Analysis dilakukan untuk mengeksplor data dan mencari pengetahuan dari data. Pada kasus ini, tujuannya untuk mengetahui fitur apa saja yang berpengaruh pada distribusi attrition.

#### Univariate Analysis
"""

# Cek distribusi attrition

# Hitung jumlah masing-masing kategori attrition
attrition_counts = df['Attrition'].value_counts()
labels = ['Stay (0)', 'Resign (1)']
colors = ["#72BCD4", "#D3D3D3"]

# Pie chart
plt.figure(figsize=(6,6))
plt.pie(attrition_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title('Distribusi Attrition Rate')
plt.axis('equal')
plt.show()

"""**Insight**:

Karyawan yang resign memiliki persentase 16.9% dari keseluruhan karyawan.
"""

numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns

# Cek distribusi nilai numerik
n_cols = 2
n_rows = (len(numerical_cols) + 1) // n_cols

fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, n_rows * 4))
axes = axes.flatten()

# Plot setiap fitur
for i, col in enumerate(numerical_cols):
    sns.histplot(df[col], kde=True, color='skyblue', bins=30, ax=axes[i])
    axes[i].set_title(f'Distribusi: {col}')

for j in range(i+1, len(axes)):
    fig.delaxes(axes[j])

plt.tight_layout()
plt.suptitle('Distribusi Fitur Numerik', fontsize=16, y=1.02)
plt.show()

"""**Insights**:

1. Fitur MonthlyIncome, TotalWorkingYears, YearsAtCompany, YearsSinceLastPromotion, YearsInCurrentRole, YearsWithCurrManager skew kanan (positif)
2. Fitur Age dan HourlyRate memiliki distribusi yang normal.
3. Fitur EmployeeID, DailyRate, MonthlyRate memiliki distribusi acak.
"""

# Cek outliers kolom numerik
n_cols = 5
n_rows = math.ceil(len(numerical_cols) / n_cols)

plt.figure(figsize=(n_cols * 4, n_rows * 3))  # Ukuran figure dinamis
for i, col in enumerate(numerical_cols, 1):
    plt.subplot(n_rows, n_cols, i)
    sns.boxplot(x=df[col])  # pakai x biar horizontal
    plt.title(f'Boxplot for {col}')

plt.tight_layout()
plt.show()

"""**Insights**:

- Berdasarkan boxplot di atas, terdapat beberapa outlier yang perlu ditangani di antaranya: MonthlyIncome, TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsWithCurrManager, YearsSinceLastPromotion, NumCompaniesWorked, dan PercentSalaryHike.
- Kolom lainnya aman karena tidak memiliki ouliers.
"""

# Plot distribusi kategori
categorical_cols = df.select_dtypes(include=['object']).columns

num_plots = len(categorical_cols)

fig, axes = plt.subplots(nrows=num_plots, figsize=(8, 4 * num_plots))

for i, col in enumerate(categorical_cols):
    value_counts = df[col].value_counts()

    sns.barplot(
        x=value_counts.values,
        y=value_counts.index,
        color='skyblue',
        ax=axes[i]
    )
    axes[i].set_title(f'Distribusi Kategori: {col}')
    axes[i].set_xlabel('Jumlah')
    axes[i].set_ylabel(col)

plt.tight_layout()
plt.show()

"""#### Multivariate Anaylisis"""

# Korelasi antar kolom numerik
plt.figure(figsize=(10, 8))
sns.heatmap(df[numerical_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Korelasi antar fitur numerik')
plt.show()

"""## Data Preparation / Preprocessing"""

preparation_df = df.copy()

# Menghapus kolom dengan missing value
preparation_df.dropna(inplace=True)

# Save dataframe ke file csv untuk keperluan dashboard analysis
preparation_df.to_csv('employee_clean.csv', index=False)

# Salin dataframe dulu biar bisa dibandingkan
df_winsor = preparation_df.copy()

# Kolom yang ingin ditangani outliers-nya
cols_with_outliers = [
    'MonthlyIncome',
    'TotalWorkingYears',
    'YearsAtCompany',
    'YearsInCurrentRole',
    'YearsWithCurrManager',
    'YearsSinceLastPromotion',
    'NumCompaniesWorked',
    'PercentSalaryHike'
]

# Winsorizing (5% bawah dan atas)
for col in cols_with_outliers:
    df_winsor[col] = winsorize(df_winsor[col], limits=[0.05, 0.05])

# Mengatur ukuran figure (jumlah baris disesuaikan dengan jumlah kolom)
n_cols = 2
n_rows = (len(cols_with_outliers) + 1) // n_cols
plt.figure(figsize=(14, 5 * n_rows))

for i, col in enumerate(cols_with_outliers):
    # Sebelum Winsorizing
    plt.subplot(n_rows, n_cols * 2, i * 2 + 1)
    sns.boxplot(x=preparation_df[col], color='salmon')
    plt.title(f"Before Winsorizing - {col}")

    # Setelah Winsorizing
    plt.subplot(n_rows, n_cols * 2, i * 2 + 2)
    sns.boxplot(x=df_winsor[col], color='skyblue')
    plt.title(f"After Winsorizing - {col}")

plt.tight_layout()
plt.show()

df_encoded = preparation_df.copy()

# Menentukan tipe data kategorik yang memiliki nilai unik maksimal 10
categorical_cols = []
for col in df_encoded.columns:
    if df_encoded[col].dtype == 'object' or df_encoded[col].nunique() <= 10:
        categorical_cols.append(col)

# Label encoding
label_encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    df_encoded[col] = df_encoded[col].astype(str)
    df_encoded[col] = le.fit_transform(df_encoded[col])
    label_encoders[col] = le  # Menyimpan encoder

print(df_encoded.head())

# Memisahkan fitur kategorikal dan numerikal berdasarkan unique values
categorical_cols = []
numerical_cols = []

for col in df_encoded.columns:
    if col not in ['EmployeeId', 'Attrition']:
        if df_encoded[col].nunique() <= 10:
            categorical_cols.append(col)
        else:
            numerical_cols.append(col)

# === CHI-SQUARE TEST ===
print("=== CHI-SQUARE TEST ===")
for col in categorical_cols:
    try:
        table = pd.crosstab(df_encoded['Attrition'], df_encoded[col])
        chi2, p, dof, expected = chi2_contingency(table)
        print(f"{col}: p-value = {p:.5f} {'< 0.05 ✅' if p < 0.05 else '>= 0.05 ❌'}")
    except Exception as e:
        print(f"{col}: Error - {e}")

# === T-TEST ===
print("\n=== T-TEST ===")
for col in numerical_cols:
    try:
        resign = df_encoded[df_encoded['Attrition'] == 1][col]
        stay = df_encoded[df_encoded['Attrition'] == 0][col]
        t_stat, p = ttest_ind(resign, stay, equal_var=False)
        print(f"{col}: p-value = {p:.5f} {'< 0.05 ✅' if p < 0.05 else '>= 0.05 ❌'}")
    except Exception as e:
        print(f"{col}: Error - {e}")

"""Berdasarkan feature importance di atas, berikut fitur yang akan digunakan:

- JobRole
- OverTime
- MaritalStatus
- JobSatisfaction
- DistanceFromHome
- MonthlyIncome
- YearsAtCompany
- Attrition (target)
"""

# Menyimpan fitur ke dalam dataframe baru
selected = ['JobRole', 'OverTime', 'MaritalStatus', 'JobSatisfaction', 'DistanceFromHome', 'MonthlyIncome', 'YearsAtCompany', 'Attrition']
df_selected = df_encoded[selected].copy()

df_selected.head()

# Splitting Data
X = df_selected.drop('Attrition', axis=1)
y = df_selected['Attrition']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y)

"""## Modeling"""

# Dictionary untuk menyimpan model
models = {
    'logistic_regression': LogisticRegression(max_iter=1000),
    'decision_tree': DecisionTreeClassifier(random_state=42),
    'random_forest': RandomForestClassifier(random_state=42)
}

# Training model
for name, model in models.items():
    model.fit(X_train, y_train)
    with open(f'{name}_model.pkl', 'wb') as file:
        pickle.dump(model, file)
    print(f"Model '{name}' disimpan ke {name}_model.pkl")

"""## Evaluation"""

# Evaluasi model yang sudah disimpan
model_scores = {}

for name in models.keys():
    # Load model dari file
    with open(f'{name}_model.pkl', 'rb') as file:
        loaded_model = pickle.load(file)

    # Predict
    y_pred = loaded_model.predict(X_test)

    # Hitung akurasi
    acc = accuracy_score(y_test, y_pred)
    model_scores[name] = acc

    # Tampilkan hasil evaluasi
    print(f"\n=== Evaluasi Model: {name.replace('_', ' ').title()} ===")
    print(f"Akurasi: {acc:.4f}")
    print(classification_report(y_test, y_pred))

# Menentukan model terbaik
best_model_name = max(model_scores, key=model_scores.get)
best_score = model_scores[best_model_name]

print(f"\nModel terbaik: {best_model_name.replace('_', ' ').title()} (akurasi {best_score:.4f})")

"""## Menyimpan model dan encoder"""

# Menyimpan label_encoders ke file
with open('label_encoders.pkl', 'wb') as file:
    pickle.dump(label_encoders, file)

# Save model terbaik
with open(f'{best_model_name}_model.pkl', 'rb') as file:
    best_model = pickle.load(file)